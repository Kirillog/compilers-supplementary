-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign (state@[args, locs], loc, v) {

    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac;
    state
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun createLocal(s, na, nl) {
    case take(s, na) of
      [tail, args] -> [tail, [listArray(args), initArray (nl, fun (_) {0})]]
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  fun eval (c@[stack, call_stack, state, world], prog) {
    case prog of
    {} -> c
    | i:prog ->
    -- fprintf(stderr, "%s\n", showSMInsn(i));
    -- fprintf(stderr, "state: %s\n", state.string);
      case i of
        READ      ->  case readWorld (world) of
                        [z, tail] -> eval([z:stack, call_stack, state, tail], prog)
                      esac
      | WRITE     ->  case stack of
                        h : tail -> eval([tail, call_stack, state, writeWorld (h, world)], prog)
                      esac
      | BINOP (s) ->  case stack of
                        y : x : tail -> eval([evalOp (s, x, y) : tail, call_stack, state, world], prog)
                      esac
      | LD    (loc) ->
      eval([lookup (state, loc) : stack, call_stack, state, world], prog)
      | ST    (loc) ->  case stack of
                          h : tail -> eval([tail, call_stack, assign(state, loc, h), world], prog)
                        esac
      | CONST (n) ->  eval([n : stack, call_stack, state, world], prog)
      | LABEL (_) ->  eval(c, prog)
      | JMP (lab) ->  eval(c, fromLabel(env, lab))
      | CJMP ("nz", lab) -> case stack of
                              0 : tail -> eval([tail, call_stack, state, world], prog)
                            | n : tail -> eval([tail, call_stack, state, world], fromLabel(env, lab))
                            esac
      | CJMP ("z", lab) -> case stack of
                              0 : tail -> eval([tail, call_stack, state, world], fromLabel(env, lab))
                            | n : tail -> eval([tail, call_stack, state, world], prog)
                            esac
      | LDA (loc) ->  eval([Ref (loc) : stack, call_stack, state, world], prog)
      | STI       ->  case stack of
                        v : Ref (x) : tail -> eval([v : tail, call_stack, assign(state, x, v), world], prog)
                      esac
      | DROP      ->  eval([tl(stack), call_stack, state, world], prog)
      | END       ->  case call_stack of
                        {} -> c
                      | [sigma_l, q] : s_c -> eval([stack, s_c, sigma_l, world], q)
                      esac
      | BEGIN (_, na, nl) ->
        case createLocal(stack, na, nl) of
          [s_stroke, sigma_l] -> eval([s_stroke, call_stack, sigma_l, world], prog)
        esac
      | CALL (f, _) -> eval([stack, [state, prog] : call_stack, state, world], fromLabel(env, f))
      | GLOBAL (name) -> eval([stack, call_stack, assign(state, Glb (name), 0), world], prog)
      esac
    esac
  }

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}



-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compileFunction(env, Fun (fname, args, body, state)) {
    case genLabel (addArgs (beginFun (env, state), args)) of
      [fLab, env] ->
        case compile (fLab, env, body) of
          [fLabUsed, env, bCode] -> [env,
            singletonBuffer (LABEL (fname)) <+
            BEGIN (fname, size(args), getLocals(env)) <+>
            bCode <+>
            label (fLab, fLabUsed) <+
            END]
        esac
    esac
  }

  fun compileFunctions(env, fs) {
    case fs of
      {}     -> emptyBuffer()
    | f : fs -> case compileFunction(env, f) of
                  [env, fCode] -> fCode <+> compileFunctions(env, fs)
                esac
    esac
  }

  -- Generates SM code for a given statement
  --    lab  --- a label th go to after the statement is executed
  --    env  --- compilation environment
  --    stmt --- a statement to generate SM code for
  -- Returns a triple:
  --    boolean flag indicating if "lab" was used
  --    updated environment
  --    code buffer
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)         -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x))]
    | Write (e)         ->
        case genLabel (env) of
          [eLab, env] ->
            case compile (eLab, env, e) of
              [eLabUsed, env, eCode] ->
                [false, env, eCode <+>
                             label(eLab, eLabUsed) <+
                             WRITE]
            esac
        esac
    | Assn  (x, e)      ->
        case genLabels(env, 2) of
          [xLab, eLab, env] ->
            case compile (xLab, env, x) of
              [xLabUsed, env, xCode] ->
                case compile (eLab, env, e) of
                  [eLabUsed, env, eCode] -> [false, env, xCode <+>
                                                         label(xLab, xLabUsed) <+>
                                                         eCode <+>
                                                         label(eLab, eLabUsed) <+
                                                         STI]
                esac
            esac
        esac
    | Seq (s1, s2)      ->
        case genLabel (env) of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+>
                                                             label (s2Lab, s2LabUsed) <+>
                                                             s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2)    ->
        case genLabels(env, 3) of
          [condLab, eLab, endTrueLab, env] ->
            case compile (endTrueLab, env, s1) of
              [trueUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [_, env, s2Code] ->
                    case compile (condLab, env, e) of
                      [condLabUsed, env, condCode] -> [true, env,
                                                    condCode <+>
                                                    label(condLab, condLabUsed) <+
                                                    CJMP("z", eLab) <+>
                                                    s1Code <+>
                                                    label(endTrueLab, trueUsed) <+
                                                    JMP(lab) <+
                                                    LABEL(eLab) <+>
                                                    s2Code]
                    esac
                esac
            esac
        esac
    | While (e, s)      ->
        case genLabels(env, 3) of
          [condLab, beginLab, endLab, env] ->
            case compile (endLab, env, s) of
              [genEnd, env, sCode] ->
                case compile(condLab, env, e) of
                  [condLabUsed, env, condCode] -> [true, env,
                                                  singletonBuffer(LABEL(beginLab)) <+>
                                                  condCode <+>
                                                  label(condLab, condLabUsed) <+
                                                  CJMP("z", lab) <+>
                                                  sCode <+>
                                                  label(endLab, genEnd) <+
                                                  JMP(beginLab)]
                esac
            esac
        esac
    | DoWhile(s, e)     ->
        case genLabels(env, 3) of
          [condLab, beginLab, endLab, env] ->
            case compile (endLab, env, s) of
              [genEnd, env, sCode] ->
              case compile (condLab, env, e) of
                [condLabUsed, env, condCode] -> [false, env,
                                                   singletonBuffer(LABEL(beginLab)) <+>
                                                   sCode <+>
                                                   label(endLab, genEnd) <+>
                                                   condCode <+>
                                                   label(condLab, condLabUsed) <+
                                                   CJMP("nz", beginLab)]
              esac
            esac
        esac
    | Binop(op, e1, e2) ->
        case genLabels(env, 2) of
          [e1Lab, e2Lab, env] ->
            case compile(e1Lab, env, e1) of
              [e1LabUsed, env, e1Code] ->
                case compile(e2Lab, env, e2) of
                  [e2LabUsed, env, e2Code] -> [false, env, e1Code <+>
                                                           label(e1Lab, e1LabUsed) <+>
                                                           e2Code <+>
                                                           label(e2Lab, e2LabUsed) <+
                                                           BINOP(op)]
                esac
            esac
        esac
    | Ignore (e) ->
      case genLabel(env) of
        [eLab, env] ->
          case compile (eLab, env, e) of
            [eLabUsed, env, code] -> [false, env, code <+>
                                                  label (eLab, eLabUsed) <+
                                                  DROP]
          esac
      esac
    | Scope (defs, expr) ->
      case foldl(fun ([code, env], def) {
          case def of
              Fun (name, args, body) ->
                case genFunLabel(env, name) of
                  [label, env] -> [code, rememberFun(env, label, args, body)]
                esac
            | _ -> [code, env]
          esac
        }, foldl(fun ([code, env], def) {
          case def of
              Fun (name, args, body) ->
                case genFunLabel(env, name) of
                  [label, env] -> [code, addFun(env, name, label, size(args))]
                esac
            | Var (name)       -> [if isGlobal(env) then code <+ GLOBAL (name) else code fi, addVar(env, name)]
          esac
        }, [emptyBuffer(), beginScope(env)], defs), defs) of
        [gCode, env] ->
          case compile(lab, env, expr) of
            [labUsed, env, eCode] -> [labUsed, endScope(env), gCode <+> eCode]
          esac
      esac
    | Call (f, arg_vals) ->
      case foldl(fun ([code, env], arg) {
        case genLabel(env) of
          [argLab, env] ->
            case compile(argLab, env, arg) of
              [argLabUsed, env, argCode] -> [ code <+>
                                              argCode <+>
                                              label(argLab, argLabUsed), env]
            esac
        esac
      }, [emptyBuffer(), env], arg_vals) of
        [code, env] ->
          case lookupFun(env, f) of
            Fun(fLabel, nargs) -> [false, env, code <+
                                          CALL(fLabel, nargs)]
          esac
      esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] ->
         case getFuns(env) of
          [fs, env] -> getBuffer $ singletonBuffer(LABEL("main")) <+ BEGIN("main", 0, getLocals(env)) <+> code <+> label (endLab, endLabUsed) <+ END <+> compileFunctions(env, fs)
         esac
       esac
  esac
}

