-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInsn (c@[stack, state, world], i) {
  case i of
    READ      ->  case readWorld (world) of
                    [z, tail] -> [z:stack, state, tail]
                    | _ -> failure ("Try to read from empty world")
                  esac
  | WRITE     ->  case stack of
                    h : tail -> [tail, state, writeWorld (h, world)]
                    | _ -> failure ("Incorrect number of arguments on a stack in write")
                  esac
  | BINOP (s) ->  case stack of
                      y : x : tail -> [evalBinop (s, x, y) : tail, state, world]
                    | _ -> failure ("Incorrect number of arguments on a stack in binop")
                  esac
  | LD    (x) ->  [state (x) : stack, state, world]
  | ST    (x) ->  case stack of
                      h : tail -> [tail, state <- [x, h], world]
                    | _ -> failure ("Incorrect number of arguments on a stack in st")
                  esac
  | CONST (n) ->  [n : stack, state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
      {}   -> c
    | i:is -> eval (evalInsn (c, i), is)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (x)   -> {LD (x)}
    | Const (n) -> {CONST (n)}
    | Binop (op, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (x, e)  -> compileExpr (e) +++ {ST (x)}
    | Read (x)     -> {READ, ST (x)}
    | Write (e)    -> compileExpr (e) +++ {WRITE}
    | Skip         -> {}
    | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
  esac
}
