-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
      Assn (name, expr) ->
      [state <- [name, evalExpr (state, expr)], world]
    | Seq (s1, s2) -> eval (eval (c, s1), s2)
    | Skip -> c
    | Read (name) ->
      case readWorld (world) of
          [] -> failure ("Try to read from empty world")
        | [z, world1] -> [state <- [name, z], world1]
      esac
    | Write (expr) ->
      [state, writeWorld (evalExpr (state, expr), world)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
