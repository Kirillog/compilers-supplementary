-- Expression evaluator

import List;
import State;


public fun evalBinop (op, ev1, ev2) {
  case op of
      "+" -> ev1 + ev2
    | "-" -> ev1 - ev2
    | "*" -> ev1 * ev2
    | "/" -> ev1 / ev2
    | "%" -> ev1 % ev2
    | "<" -> ev1 < ev2
    | ">" -> ev1 > ev2
    | "<=" -> ev1 <= ev2
    | ">=" -> ev1 >= ev2
    | "==" -> ev1 == ev2
    | "!=" -> ev1 != ev2
    | "&&" -> ev1 && ev2
    | "!!" -> ev1 !! ev2
    | _ -> failure ("Unsupported binop " ++ op)
    esac
}

-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  case expr of
      Var (x)   -> st (x)
    | Const (n) -> n
    | Binop (op, e1, e2) ->
      evalBinop (op, evalExpr (st, e1), evalExpr (st, e2))
  esac
}
