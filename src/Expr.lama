-- Expression evaluator

import List;
import State;
import World;
import Lexer;
import Parser;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun checkVar (state, name) {
  case state.lookup (name) of
    Var (_) -> skip
  | _       -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun checkFun (state, name) {
  case state.lookup (name) of
    Fun (_, _) -> skip
  | _          -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNamesConf ([state, world], names, values) {
  [foldl (fun (s, [name, value]) {s.addName (name, value)}, state, zip(names, values)), world]
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun enterScopeConf (c@[s, w]) {
  [enterScope(s), w]
}

fun leaveScopeConf (c@[s, w]) {
  [leaveScope(s), w]
}

fun enterFunctionConf(c@[s, w]) {
  [enterFunction(s), w]
}

fun eval (c@[state, world], expr) {
  -- fprintf(stderr, "%s\n", expr.string);
  case expr of
      Const (n) -> [c, n]
    | Var (x)   -> [c, lookup(state, x)]
    | Ref (x)   -> [c, Ref (x)]
    | Binop (op, e1, e2) ->
      case evalList(c, {e1, e2}) of
        [new_c, {w, v}] -> [new_c, evalOp (op, w, v)]
      esac
    | Skip -> [c, Bottom]
    | Assn (name, expr) ->
      case evalList(c, {name, expr}) of
        [[new_state, new_world], {Ref (x), value}] -> [[new_state <- [x, value], new_world], value]
      esac
    | Read (name) ->
      case readWorld (world) of
        [z, world1] -> [[state <- [name, z], world1], Bottom]
      esac
    | Write (expr) ->
      case eval(c, expr) of
        [[new_state, new_world], value] -> [[new_state, writeWorld (value, new_world)], Bottom]
      esac
    | Seq (s1, s2) ->
      case evalList(c, {s1, s2}) of
        [c, {_, v2}] -> [c, v2]
      esac
    | If (e, s1, s2) ->
      case eval(c, e) of
        [new_c, 0] -> eval(new_c, s2)
      | [new_c, n] -> eval(new_c, s1)
      esac
    | While (e, s) ->
      case eval(c, e) of
        [new_c, 0] -> [new_c, Bottom]
      | [new_c, n] -> eval(new_c, Seq(s, expr))
      esac
    | DoWhile (s, e) ->
      eval(eval(c, s)[0], While(e, s))
    | Ignore (e) -> [eval(c, e)[0], Bottom]
    | Scope(defs, exprs) ->
      case eval(foldl(fun ([acc_state, w], def) {
          [case def of
              Fun (name, args, body) -> addFunction(acc_state, name, args, body)
            | Var (name)             -> addName(acc_state, name, 0)
          esac, w]
        }, enterScopeConf(c), defs), exprs) of
        [c, v] -> [leaveScopeConf(c), v]
      esac
    | Call (x, arg_vals) ->
      case lookup(state, x) of
        Fun(arg_names, body) ->
          case evalList(c, arg_vals) of
            [new_c, arg_vals] ->
              case eval(addNamesConf(enterFunctionConf(new_c), arg_names, arg_vals), body) of
                [[c, w], value] -> [[leaveFunction(new_c[0], getGlobal(c)), w], value]
              esac
          esac
      esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState (), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}