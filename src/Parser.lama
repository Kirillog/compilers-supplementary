-- Parser

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop(l, op, r) {
  Binop(op, l, r)
}

-- Primary expression
var primary = memo $ eta (decimal @ fun (x) {Const (stringInt (x))} |
                          lident  @ fun (x) {Var (x)} |
                          inbr (s ("("), exp, s (")"))),
    binaryExpression = memo $ eta expr({
        [Left, {[s ("!!"), binop]}],
        [Left, {[s ("&&"), binop]}],
        [Nona, {
          [s ("=="), binop],
          [s ("!="), binop],
          [s ("<="), binop],
          [s (">="), binop],
          [s ("<"), binop],
          [s (">"), binop]
        }],
        [Left, {
          [s ("+"), binop],
          [s ("-"), binop]
        }],
        [Left, {
          [s ("*"), binop],
          [s ("/"), binop],
          [s ("%"), binop]
        }]
      }, primary),
    exp = memo $ eta binaryExpression,
    elsePart = memo $ eta syntax(
      kElif cond=exp kThen body=stmtList el=elsePart? { If (cond, body, case el of Some(el) -> el | None -> Skip esac) }       |
      kElse el=stmtList {el}
    ),
    stmt = memo $ eta syntax (
      kRead x=inbr[s("("), lident, s(")")]    { Read (x) }       |
      kWrite e=inbr[s("("), exp, s(")")]      { Write (e) }      |
      kSkip                                   { Skip }           |
      x=lident s[":="] v=exp                  { Assn (x, v) }    |
      kIf cond=exp kThen body=stmtList el=elsePart? kFi { If (cond, body, case el of Some(el) -> el | None -> Skip esac) } |
      kWhile c=exp kDo b=stmtList kOd              { While (c, b) }|
      kDo b=stmtList kWhile c=exp kOd              { DoWhile (b, c) } |
      kFor s1=stmtList s[","] e=exp s[","] s2=stmtList kDo s3=stmtList kOd { Seq(s1, While(e, Seq(s3, s2))) }
    ),
    stmtList = memo $ eta syntax (
      stmt |
      head=stmt s[";"] tail=stmtList {Seq (head, tail)});

-- Public top-level parser
public parse = stmtList;
